{"version":3,"sources":["components/Header.jsx","components/InputBox.jsx","components/Vector.jsx","components/CalculationDisplay.jsx","components/VectorControl.jsx","Fractions.js","App.js","index.js"],"names":["Header","InputBox","id","inputBoxes","setInputBoxes","onUpdate","className","type","onChange","e","target","value","Vector","name","map","inputBox","CalculationDisplay","displayUnavailable","VectorControl","addBox","deleteBox","dimension","onClick","addFrac","frac1","frac2","num1","denom1","num2","denom2","reduceFrac","getGCD","a","b","multFrac","frac","num","denom","gcd","displayFrac","String","stringToFrac","indexOf","split","parseInt","match","length","isNaN","validFrac","App","useState","inputBoxes1","setInputBoxes1","inputBoxes2","setInputBoxes2","idCount","setIdCount","newBox","filter","box","index","updateBox","input","sum","i","component1","component2","product","calculateDotProduct","u1","u2","u3","v1","v2","v3","u2v3","u3v2","x","u1v3","u3v1","y","u1v2","u2v1","z","calculateCrossProduct","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42811904.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <>\n      <h1>Vector Calculations</h1>\n      <p>\n        Enter integers or fractions a/b representing components. Any empty box\n        will be interpreted as 0. Use the +/- buttons to add or remove\n        components.\n      </p>\n    </>\n  );\n};\n\nexport default Header;\n","const InputBox = ({ id, inputBoxes, setInputBoxes, onUpdate }) => {\n  return (\n    <div>\n      <input\n        className=\"vector-input\"\n        type=\"text\"\n        onChange={(e) =>\n          onUpdate(inputBoxes, setInputBoxes, id, e.target.value)\n        }\n      />\n    </div>\n  );\n};\n\nexport default InputBox;\n","import InputBox from \"./InputBox\";\n\nconst Vector = ({ name, inputBoxes, setInputBoxes, onUpdate }) => {\n  return (\n    <div>\n      <h4>{name}</h4>\n      {inputBoxes.map((inputBox) => (\n        <InputBox\n          key={inputBox.id}\n          id={inputBox.id}\n          inputBoxes={inputBoxes}\n          setInputBoxes={setInputBoxes}\n          onUpdate={onUpdate}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Vector;\n","const CalculationDisplay = ({ name, value, displayUnavailable }) => {\n  return (\n    <h3>\n      {name}:{\" \"}\n      {displayUnavailable ? (\n        <>\n          Only in ℝ<sup>3</sup>\n        </>\n      ) : (\n        value\n      )}\n    </h3>\n  );\n};\n\nexport default CalculationDisplay;\n","const VectorControl = ({ addBox, deleteBox, dimension }) => {\n  return (\n    <div className=\"vector-control-container\">\n      <h3 className=\"dimension-display\">\n        ℝ<sup>{dimension}</sup>\n      </h3>\n      <button onClick={deleteBox}>-</button>\n      <button onClick={addBox}>+</button>\n    </div>\n  );\n};\n\nexport default VectorControl;\n","export const addFrac = (frac1, frac2) => {\n  let num1 = frac1[0];\n  let denom1 = frac1[1];\n  let num2 = frac2[0];\n  let denom2 = frac2[1];\n  const finalNum = num1 * denom2 + num2 * denom1;\n  const finalDenom = denom1 * denom2;\n  return reduceFrac([finalNum, finalDenom]);\n};\n\nconst getGCD = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n\n  return getGCD(b, a % b);\n};\n\nconst validFrac = (frac) => {\n  const num = frac[0];\n  const denom = frac[1];\n  return !isNaN(num) && !isNaN(denom) && denom !== 0;\n};\n\nexport const multFrac = (frac1, frac2) => {\n  const num1 = frac1[0];\n  const denom1 = frac1[1];\n  const num2 = frac2[0];\n  const denom2 = frac2[1];\n  const fracProduct = [num1 * num2, denom1 * denom2];\n  return reduceFrac(fracProduct);\n};\n\nconst reduceFrac = (frac) => {\n  let num = frac[0];\n  let denom = frac[1];\n  if (num % denom === 0) {\n    return [num / denom, 1];\n  } else {\n    const gcd = getGCD(num, denom);\n    if (gcd !== 1) {\n      return [num / gcd, denom / gcd];\n    } else {\n      return [num, denom];\n    }\n  }\n};\n\nexport const displayFrac = (frac) => {\n  let num = frac[0];\n  let denom = frac[1];\n  if (denom < 0 && num > 0) {\n    num *= -1;\n    denom *= -1;\n  }\n  if (denom === 1) {\n    return String(num);\n  } else {\n    return String(num) + \"/\" + String(denom);\n  }\n};\n\n// do fraction check in here!!! (check if NaN, denom = 0, decimal)\nexport const stringToFrac = (frac) => {\n  frac = String(frac);\n  if (frac.indexOf(\".\") >= 0) {\n    return false;\n  }\n  const split = frac.split(\"/\");\n  let num = parseInt(split[0], 10);\n  let denom = parseInt(split[1], 10);\n  if (frac === \"\") {\n    return [0, 1];\n  }\n  if ((frac.match(/-/g) || []).length === frac.length) {\n    return [0, 1];\n  }\n  if (isNaN(denom)) {\n    denom = 1;\n  }\n  if (!validFrac([num, denom])) {\n    return false;\n  }\n  return [num, denom];\n};\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport Vector from \"./components/Vector\";\nimport CalculationDisplay from \"./components/CalculationDisplay\";\nimport VectorControl from \"./components/VectorControl\";\nimport { useState } from \"react\";\nimport { stringToFrac, addFrac, multFrac, displayFrac } from \"./Fractions\";\n\nfunction App() {\n  // default input boxes for v1\n  const [inputBoxes1, setInputBoxes1] = useState([\n    {\n      id: 1,\n      value: 0,\n    },\n    { id: 2, value: 0 },\n    { id: 3, value: 0 },\n  ]);\n\n  // default input boxes for v2\n  const [inputBoxes2, setInputBoxes2] = useState([\n    {\n      id: 4,\n      value: 0,\n    },\n    { id: 5, value: 0 },\n    { id: 6, value: 0 },\n  ]);\n\n  const [idCount, setIdCount] = useState(7);\n\n  // adds input box\n  const addBox = (inputBoxes, setInputBoxes) => {\n    if (inputBoxes.length >= 12) {\n      return;\n    }\n    setIdCount(idCount + 1);\n    const newBox = { id: idCount, value: 0 };\n    setInputBoxes([...inputBoxes, newBox]);\n  };\n\n  // adds box to both vectors\n  const addBoxes = () => {\n    addBox(inputBoxes1, setInputBoxes1);\n    addBox(inputBoxes2, setInputBoxes2);\n  };\n\n  // deletes an input box\n  const deleteBox = (inputBoxes, setInputBoxes) => {\n    if (inputBoxes.length <= 2) {\n      return;\n    }\n    setInputBoxes(\n      inputBoxes.filter((box, index) => index !== inputBoxes.length - 1)\n    );\n  };\n\n  // deletes box for both vectors\n  const deleteBoxes = () => {\n    deleteBox(inputBoxes1, setInputBoxes1);\n    deleteBox(inputBoxes2, setInputBoxes2);\n  };\n\n  // updates an input box's value\n  const updateBox = (inputBoxes, setInputBoxes, id, input) => {\n    setInputBoxes(\n      inputBoxes.map((box) => (box.id === id ? { ...box, value: input } : box))\n    );\n    //{ ...task, reminder: !task.reminder }\n  };\n\n  // finds dot product\n  const calculateDotProduct = () => {\n    let sum = [0, 1]; // fraction representing 0\n    for (let i in inputBoxes1) {\n      const component1 = stringToFrac(inputBoxes1[i].value);\n      const component2 = stringToFrac(inputBoxes2[i].value);\n      if (!component1 || !component2) {\n        return \"Please enter an integer or fraction a/b\";\n      }\n      const product = multFrac(component1, component2);\n      sum = addFrac(sum, product);\n    }\n    return displayFrac(sum);\n  };\n\n  // finds cross product\n  const calculateCrossProduct = () => {\n    if (inputBoxes1.length !== 3) {\n      return false;\n    } else {\n      const u1 = stringToFrac(inputBoxes1[0].value);\n      const u2 = stringToFrac(inputBoxes1[1].value);\n      const u3 = stringToFrac(inputBoxes1[2].value);\n      const v1 = stringToFrac(inputBoxes2[0].value);\n      const v2 = stringToFrac(inputBoxes2[1].value);\n      const v3 = stringToFrac(inputBoxes2[2].value);\n      if (!u1 || !u2 || !u3 || !v1 || !v2 || !v3) {\n        return \"Please enter an integer or fraction a/b\";\n      }\n      // x component\n      const u2v3 = multFrac(u2, v3);\n      const u3v2 = multFrac([-1, 1], multFrac(u3, v2));\n      const x = addFrac(u2v3, u3v2);\n      // y component\n      const u1v3 = multFrac([-1, 1], multFrac(u1, v3));\n      const u3v1 = multFrac(u3, v1);\n      const y = addFrac(u1v3, u3v1);\n      // z component\n      const u1v2 = multFrac(u1, v2);\n      const u2v1 = multFrac([-1, 1], multFrac(u2, v1));\n      const z = addFrac(u1v2, u2v1);\n\n      return (\n        \"(\" +\n        displayFrac(x) +\n        \", \" +\n        displayFrac(y) +\n        \", \" +\n        displayFrac(z) +\n        \")\"\n      );\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <div className=\"vector-container\">\n        <Vector\n          name={\"a\"}\n          inputBoxes={inputBoxes1}\n          setInputBoxes={setInputBoxes1}\n          onUpdate={updateBox}\n        />\n        <VectorControl\n          addBox={addBoxes}\n          deleteBox={deleteBoxes}\n          dimension={inputBoxes1.length}\n        />\n        <Vector\n          name={\"b\"}\n          inputBoxes={inputBoxes2}\n          setInputBoxes={setInputBoxes2}\n          onUpdate={updateBox}\n        />\n      </div>\n      <div className=\"calculation-container\">\n        <CalculationDisplay\n          name={\"Dot Product a • b\"}\n          value={calculateDotProduct()}\n        />\n        <CalculationDisplay\n          name={\"Cross Product a x b\"}\n          value={calculateCrossProduct()}\n          displayUnavailable={inputBoxes1.length !== 3}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}